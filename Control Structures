Loops
This structure helps reduce redundancy by being able to create a function that logically repeats (loops) itself.
Example Code:
% A loop helps reduce redundancy by repeating a set of commands
% given a certain number to iterate through.

clc; clear;

% Using a loop to repeat commands
for i = 1:4
    
    a = 5
    b = 2
end


% Using the looping variable
% You can iterate multiple numbers at a time
for t = 10:2:16
    t
end

% You can also iterate back-wards
for k = 10:-1:7
    k
end

% As well as iterate using arithmetic expressions
for j = 1:3
    q = 5*j
end

% Using the variable to index an array
in = [0 ; 0.5; 1; -0.5]

for elem = 1:4

    out(elem,1) = in(elem,1)

end

out

Conditional Statements
Conditional statements are only executed if they meet a certain 'condition'.
Example Code:
% conditionalStatements.m
clear; clc;
% This script demonstrates several basic examples for
% using conditional statements

num = -1
if num > 0 
    gtz = true
elseif num < 0
    ltz = true
else
    zero = true
end

Logicals
Logicals, compare whether 2 variables are equal (==), less (<) or greater (>) than, less than or greater than or equal to (<=, >=),
and not equal to (~=).

Example Code:
>> a =  5

a =

     5

>> a == 5

ans =

  logical

   1

>> a == 3

ans =

  logical

   0

>> a > 3

ans =

  logical

   1

>> a > 7

ans =

  logical

   0

>> a >= 3

ans =

  logical

   1

>> a >= 5

ans =

  logical

   1

>> a ~= 3

ans =

  logical

   1

>> a ~= 5

ans =

  logical

   0

>> 

Functions
Functions allow us to create a set of instructions and save it as its' own variable in a sense where
we can call back on the name of the function in a separate script instead of having to reduntantly 
rewrite sets of instructions.

Example Code:
% This is the function created in its' own script
function [y] = userSqrt(x)


y = x ^ (1/2);

% This is a different script that calls this function into the instruction set
% functionScript.m

% This script can be used to test other function files

clear; clc;

a = 81

b = userSqrt(a)
